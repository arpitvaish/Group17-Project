openapi: 3.0.3
info:
  title: Service management service
  description: |-
    This API design for service management service which is part of local services and business application.
    This service has CRUD operation for services.
  version: '1.0'
servers:
  - url: http://localhost:8080
tags:
  - name: service
    description: Operations about service
  - name: business
    description: Operations about business
  - name: category
    description: Operations about category
paths:
  /services:
    post:
      tags:
        - service
      summary: Create new Service
      description: Creating service with serviceName, description, businessName and categoryName.
      operationId: createService
      requestBody:
        description: Mandatory fields serviceName, businessName and categoryName. Category Names can be grocery, pharmacies, clothing, food, electronics, automobiles, financial, beauty, taxi.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: 'Service name, Business name and Category name are cant be empty / Unable to create service with this category / Already service exists with these details'
    get:
      tags:
        - service
      summary: Get all services
      description: Get all services which are exists. If there is no services then return empty array.
      operationId: getALlServices
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
  /services/{serviceName}:
    get:
      tags:
        - service
      summary: Finds services by name
      description: Finds all services which service names contains given name
      operationId: getServiceByName
      parameters:
        - name: serviceName
          in: path
          description: Name to find services
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
  /services/{serviceId}:
    get:
      tags:
        - service
      summary: Finds service by Id
      description: Find service which service id is equal to given Id
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID of service(UUID)
          required: true
          schema:
            type: string
            format: uuid2
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '404':
          description: 'Service not found with id: 123456789'
    put:
      tags:
        - service
      summary: Update service by Id
      description: Updating service details(Service name, description) for given service Id.
      operationId: updateService
      parameters:
        - name: serviceId
          in: path
          description: ID of service(UUID)
          required: true
          schema:
            type: string
            format: uuid2
      requestBody:
        description: Provide serviceName and description to update service for giver service id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '404':
          description: 'Service not found with id: 123456789'
    delete:
      tags:
        - service
      summary: Delete a service
      description: delete a service for given service id.
      operationId: deleteService
      parameters:
        - name: serviceId
          in: path
          description: ID of service(UUID)
          required: true
          schema:
            type: string
            format: uuid2
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '404':
          description: 'Service not found with id: 123456789'
  /business/{businessId}:
    get:
      tags:
        - business
      summary: Finds service by business id
      description: Find service by given business id
      operationId: getServicesByBusinessId
      parameters:
        - name: businessId
          in: path
          description: ID of business(UUID)
          required: true
          schema:
            type: string
            format: uuid2
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
        '404':
          description: 'Business not found with id: 123456789'
  /category/{categoryName}:
    get:
      tags:
        - category
      summary: Find services by category name
      description: Finds all services which category names contains given name
      operationId: getServicesByCategoryName
      parameters:
        - name: categoryName
          in: path
          description: Name to find services
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceResponse'
components:
  schemas:
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid2
          example: 123456789
        serviceName:
          type: string
          example: "Mobile sales and repairs"
        description:
          type: string
          example: "This service is for mobiles"
        business:
          type: array
          xml:
            name: business
            wrapped: true
          items:
            $ref: '#/components/schemas/Business'
        category:
          type: array
          xml:
            name: business
            wrapped: true
          items:
            $ref: '#/components/schemas/Category'
    ServiceRequest:
      type: object
      properties:
        serviceName:
          type: string
          example: "Mobile sales and repairs"
        description:
          type: string
          example: "This service is for mobiles"
        businessName:
          type: string
          example: "ABC business"
        categoryName:
          type: string
          example: "ELECTRONICS"
    ServiceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid2
          example: 123456789
        serviceName:
          type: string
          example: "Mobile sales and repairs"
        description:
          type: string
          example: "This service is for mobiles"
        businessName:
          type: string
          example: "ABC business"
        categoryName:
          type: string
          example: "ELECTRONICS"
    UpdateServiceRequest:
      type: object
      properties:
        serviceName:
          type: string
          example: "Mobile sales and repairs"
        description:
          type: string
          example: "This service is for mobiles"
    Business:
      type: object
      properties:
        id:
          type: string
          format: uuid2
          example: 123456789
        name:
          type: string
          example: "ABC business"
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    Category:
      type: object
      properties:
        name:
          type: string
          enum: [grocery, pharmacies, clothing, food, electronics, automobiles, financial, beauty, taxi]
          example: "ELECTRONICS"